def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Manifest version
def major = 0;
def minor = 0;
def patch = 0;
def build = 2;

android {
    compileSdkVersion 27

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "net.granoeste.example.helloflutter"
        minSdkVersion 16
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        if (project.hasProperty("versionCode")) {
            def newerVersionCode = Integer.parseInt(project.property("versionCode"))
            def newerMajor = Math.round(newerVersionCode / 1000000)
            def newerMinor = Math.round((newerVersionCode - (newerMajor * 1000000)) / 10000)
            def newerPatch = Math.round((newerVersionCode - (newerMajor * 1000000) - (newerMinor * 10000)) / 100)
            def newerversionName = "${newerMajor}.${newerMinor}.${newerPatch}"
            println("newerVersionCode:" + newerVersionCode)
            println("newerversionName:" + newerversionName)
            versionCode newerVersionCode
            versionName newerversionName
        } else {
            versionCode major * 1000000 + minor * 10000 + patch * 100 + build * 1
            versionName "${major}.${minor}.${patch}"
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled true
            useProguard true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
